{"title":"MiraiCore","fileName":"/contracts/MiraiCore.sol","name":"MiraiCore","abi":[{"constant":true,"inputs":[],"name":"getAvailableProductIds","outputs":[{"name":"","type":"int256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"productsByOwner","outputs":[{"name":"id","type":"uint256"},{"name":"owner","type":"address"},{"name":"price","type":"uint256"},{"name":"available","type":"bool"},{"name":"numberSold","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_productId","type":"uint256"}],"name":"getProductById","outputs":[{"name":"id","type":"uint256"},{"name":"owner","type":"address"},{"name":"price","type":"uint256"},{"name":"available","type":"bool"},{"name":"numberSold","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"},{"name":"_owner","type":"address"},{"name":"_available","type":"bool"}],"name":"createProduct","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAllProductIds","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"products","outputs":[{"name":"id","type":"uint256"},{"name":"owner","type":"address"},{"name":"price","type":"uint256"},{"name":"available","type":"bool"},{"name":"numberSold","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_seller","type":"address"},{"name":"_productId","type":"uint256"},{"name":"_newPrice","type":"uint256"}],"name":"editProductPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_productIdStr","type":"string"}],"name":"incrementNumberSold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getPriceById","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"allProductIds","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"ownerList","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getProductIdsByOwner","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"productIdsByOwner","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[],"name":"ProductCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"owner","type":"address"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"available","type":"bool"},{"indexed":false,"name":"numberSold","type":"uint256"}],"name":"ProductCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"owner","type":"address"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"available","type":"bool"},{"indexed":false,"name":"numberSold","type":"uint256"}],"name":"PriceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"source":"pragma solidity ^0.4.24;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\n\n/**\n * @title MiraiCore\n * @notice MiraiCore controls the products and their inventory\n **/\ncontract MiraiCore is Ownable {\n\n  uint256 productLength = 0;\n\n  event ProductCreated();\n\n /**\n   * @notice Product defines a product\n  */\n  struct Product {\n    uint256 id;\n    address owner; \n    uint256 price;\n    bool available;\n    uint256 numberSold;\n  }\n\n  event ProductCreated(\n    uint256 id,\n    address owner, \n    uint256 price,\n    bool available,\n    uint256 numberSold\n  );\n\n  event PriceChanged(\n    uint256 id,\n    address owner, \n    uint256 price,\n    bool available,\n    uint256 numberSold\n  );\n\n  // @notice A mapping from product id to Product\n  mapping (uint256 => Product) public products;\n  \n  // @notice All products owned by a certain address\n  mapping (address => Product[]) public productsByOwner;\n\n  // @notice All product ids owned by a certain address\n  mapping (address => uint256[]) public productIdsByOwner;\n  \n  // @notice All product ids in existence\n  uint256[] public allProductIds;\n\n  // @notice Arrays to store owner addresses\n  address[] public ownerList;\n\n /**\n   * @notice createProduct creates a new product \n   * @param _price - the starting price (price can be changed)\n   * @param _owner - the owner of the product\n   * @param _available - whether the product should be available for sale (can be changed)\n   */\n  function createProduct(uint256 _price, address _owner, bool _available) public {\n    \n    uint256 _productId = productLength; \n    Product memory _product = Product({\n      id: _productId,\n      owner: _owner,\n      price: _price,\n      available: _available,\n      numberSold: 0\n    });\n\n    products[_productId] = _product;\n    allProductIds.push(_productId);\n    productsByOwner[_owner].push(_product);\n    productIdsByOwner[_owner].push(_productId);\n\n    productLength++;\n    emit ProductCreated(\n      _product.id,\n      _product.owner, \n      _product.price,\n      _product.available,\n      _product.numberSold\n    );\n  }\n\n  /**\n   * @notice getProductIdsByOwner returns an array of the product ids owned by an address \n   * @param _owner - the product owner we're querying for\n   * @return the array of product ids \n   */\n  function getProductIdsByOwner(address _owner) public view returns (uint256[]) {\n    return productIdsByOwner[_owner];\n  }\n\n  /**\n   * @notice getPriceById returns a product's price\n   * @param _id - the product id we're querying for\n   * @return the price of the queried product\n   */\n  function getPriceById(uint256 _id) public view returns (uint256) {\n    return products[_id].price;\n  }\n\n    /**\n   * @notice getAllProductIds returns all created product ids\n   * @return array of all product ids\n   */\n  function getAllProductIds() public view returns (uint256[]) {\n    return allProductIds;\n  }\n\n  /**\n   * @notice getProductById returns the product struct\n   * @param _productId - the product id we're querying for\n   * @return all the attributes of the queried product\n   */\n  function getProductById(uint256 _productId) public view returns (\n    uint256 id, \n    address owner, \n    uint256 price, \n    bool available, \n    uint256 numberSold) {\n\n    Product memory _product = products[_productId];\n    id = _product.id;\n    owner = _product.owner;\n    price = _product.price;\n    available = _product.available;\n    numberSold = _product.numberSold;\n  }\n  \n    /**\n   * @notice getAvailableProductIds returns all created product ids\n   * @return array of all availalbe product ids\n   */\n  function getAvailableProductIds() public view returns (\n    int[]\n  ) {\n    int[] memory availableProductIds = new int[](productLength);\n    for(uint256 i = 0; i < productLength; i++){\n      Product memory currProd = products[i];\n      if(currProd.available) {\n        availableProductIds[i] = int(currProd.id);\n      } else {\n        availableProductIds[i] = -1;\n      }\n    }\n    return availableProductIds;\n  }\n\n  /**\n   * @notice incrementNumberSold increases the numberSold attribute by 1\n   * @param _productIdStr - the product we're incrementing\n   */\n  function incrementNumberSold(string _productIdStr) external {\n    uint _productId = parseInt(_productIdStr);\n    Product memory _product = products[_productId];\n    _product.numberSold++;\n    products[_productId] = _product;\n  }\n\n  modifier onlySeller(address _seller) {\n    require(\n      msg.sender == _seller\n    );\n    _;\n  }\n\n /**\n   * @notice editProductPrice changes the price of a given product\n   * @param _seller - the account that created the product\n   * @param _productId - the product being changed\n   * @param _newPrice - what the new price should be\n   */\n  function editProductPrice(address _seller, uint256 _productId, uint256 _newPrice) public onlySeller(_seller) {\n    Product memory _product = products[_productId];\n    _product.price = _newPrice;\n    products[_productId] = _product;\n    emit PriceChanged(\n      _product.id,\n      _product.owner, \n      _product.price,\n      _product.available,\n      _product.numberSold\n    );\n  }\n\n  // Copyright (c) 2015-2016 Oraclize srl, Thomas Bertani\n  function parseInt(string _a) internal returns (uint) {\n    bytes memory bresult = bytes(_a);\n    uint mint = 0;\n    uint _b = 0;\n    bool decimals = false;\n    for (uint i = 0; i < bresult.length; i++) {\n      if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\n        if (decimals) {\n          if (_b == 0) break;\n            else _b--;\n        }\n        mint *= 10;\n        mint += uint(bresult[i]) - 48;\n      } else if (bresult[i] == 46) decimals = true;\n    }\n    return mint;\n  }\n}      ","abiDocs":[{"constant":true,"inputs":[],"name":"getAvailableProductIds","outputs":[{"name":"","type":"int256[]"}],"payable":false,"stateMutability":"view","type":"function","return":"array of all availalbe product ids","notice":"getAvailableProductIds returns all created product ids","signature":"getAvailableProductIds()","signatureHash":"05c0a614"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"productsByOwner","payable":false,"stateMutability":"view","type":"function","signature":"productsByOwner(address,uint256)","signatureHash":"1aad9a17"},{"constant":true,"inputs":[{"name":"_productId","type":"uint256","description":"- the product id we're querying for"}],"name":"getProductById","outputs":[{"name":"id","type":"uint256"},{"name":"owner","type":"address"},{"name":"price","type":"uint256"},{"name":"available","type":"bool"},{"name":"numberSold","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"all the attributes of the queried product","notice":"getProductById returns the product struct","signature":"getProductById(uint256)","signatureHash":"3f70c2b4"},{"constant":false,"inputs":[{"name":"_price","type":"uint256","description":"- the starting price (price can be changed)"},{"name":"_owner","type":"address","description":"- the owner of the product"},{"name":"_available","type":"bool","description":"- whether the product should be available for sale (can be changed)"}],"name":"createProduct","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"createProduct creates a new product ","signature":"createProduct(uint256,address,bool)","signatureHash":"46acf1a6"},{"constant":true,"inputs":[],"name":"getAllProductIds","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function","return":"array of all product ids","notice":"getAllProductIds returns all created product ids","signature":"getAllProductIds()","signatureHash":"663c01af"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to relinquish control of the contract.","signature":"renounceOwnership()","signatureHash":"715018a6"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"products","payable":false,"stateMutability":"view","type":"function","signature":"products(uint256)","signatureHash":"7acc0b20"},{"constant":false,"inputs":[{"name":"_seller","type":"address","description":"- the account that created the product"},{"name":"_productId","type":"uint256","description":"- the product being changed"},{"name":"_newPrice","type":"uint256","description":"- what the new price should be"}],"name":"editProductPrice","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"editProductPrice changes the price of a given product","signature":"editProductPrice(address,uint256,uint256)","signatureHash":"7b02efdc"},{"constant":true,"inputs":[],"name":"owner","payable":false,"stateMutability":"view","type":"function","signature":"owner()","signatureHash":"8da5cb5b"},{"constant":false,"inputs":[{"name":"_productIdStr","type":"string","description":"- the product we're incrementing"}],"name":"incrementNumberSold","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"incrementNumberSold increases the numberSold attribute by 1","signature":"incrementNumberSold(string)","signatureHash":"9e2de16e"},{"constant":true,"inputs":[{"name":"_id","type":"uint256","description":"- the product id we're querying for"}],"name":"getPriceById","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"the price of the queried product","notice":"getPriceById returns a product's price","signature":"getPriceById(uint256)","signatureHash":"b9256b1b"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"allProductIds","payable":false,"stateMutability":"view","type":"function","signature":"allProductIds(uint256)","signatureHash":"dde1bbcf"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"ownerList","payable":false,"stateMutability":"view","type":"function","signature":"ownerList(uint256)","signatureHash":"def79ab5"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"- the product owner we're querying for"}],"name":"getProductIdsByOwner","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function","return":"the array of product ids ","notice":"getProductIdsByOwner returns an array of the product ids owned by an address ","signature":"getProductIdsByOwner(address)","signatureHash":"e25afaaf"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"uint256"}],"name":"productIdsByOwner","payable":false,"stateMutability":"view","type":"function","signature":"productIdsByOwner(address,uint256)","signatureHash":"e4a8d96a"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address","description":"The address to transfer ownership to."}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allows the current owner to transfer control of the contract to a newOwner.","signature":"transferOwnership(address)","signatureHash":"f2fde38b"},{"anonymous":false,"inputs":[],"name":"ProductCreated","type":"event","signature":"ProductCreated()","signatureHash":"5e7d0702"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"owner","type":"address"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"available","type":"bool"},{"indexed":false,"name":"numberSold","type":"uint256"}],"name":"ProductCreated","type":"event","signature":"ProductCreated(uint256,address,uint256,bool,uint256)","signatureHash":"85e8c0f4"},{"anonymous":false,"inputs":[{"indexed":false,"name":"id","type":"uint256"},{"indexed":false,"name":"owner","type":"address"},{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"available","type":"bool"},{"indexed":false,"name":"numberSold","type":"uint256"}],"name":"PriceChanged","type":"event","signature":"PriceChanged(uint256,address,uint256,bool,uint256)","signatureHash":"334bcf1d"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"}],"name":"OwnershipRenounced","type":"event","signature":"OwnershipRenounced(address)","signatureHash":"f8df3114"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event","signature":"OwnershipTransferred(address,address)","signatureHash":"8be0079c"}]}
