{"title":"MiraiOwnership","fileName":"/contracts/tokens/MiraiOwnership.sol","name":"MiraiOwnership","abi":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getTokensByOwner","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"exists","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_uri","type":"string"},{"name":"owner","type":"address"}],"name":"buyPOP","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokenId","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_coreAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"tokenId","type":"uint256"},{"indexed":false,"name":"purchaser","type":"address"},{"indexed":false,"name":"productId","type":"string"},{"indexed":false,"name":"issuedTime","type":"uint256"}],"name":"POPIssued","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_approved","type":"address"},{"indexed":false,"name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_operator","type":"address"},{"indexed":false,"name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"}],"source":"pragma solidity ^0.4.24;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\";\nimport \"../MiraiCore.sol\";\n\n/**\n * @title MiraiOwnership\n * @notice MiraiOwnership is the entry point for interacting with the Mirai backend\n **/\ncontract MiraiOwnership is ERC721Token {\n\n  /**\n  * @notice Issued is emitted when a new POP is issued\n  */\n  event POPIssued(\n    uint256 tokenId,\n    address purchaser,\n    string productId,\n    uint256 issuedTime\n  );\n\n  MiraiCore core;\n\n  constructor (string _name, string _symbol, address _coreAddress) public ERC721Token(_name, _symbol){\n    core = MiraiCore(_coreAddress);\n  }\n\n  /**\n  * @notice Makes a purchase of a product, issuing a proof of purchase token\n  * @param _uri the string of the productId to purchase\n  *tokenId <-> bookId relationship kept track in tokenURI\n  * @param owner the owner of the product - who to send the ETH to\n   */\n  function buyPOP(string _uri, address owner) public payable {\n    \n    uint256 newTokenId = super.totalSupply();\n    super._mint(msg.sender, newTokenId);\n\n    super._setTokenURI(newTokenId, _uri);\n    emit POPIssued(newTokenId, msg.sender, _uri, block.timestamp);\n\n    owner.transfer(msg.value);  \n    core.incrementNumberSold(_uri);\n  }\n\n    /**\n  * @notice retrieves array of owned tokensIds. Uses inhereted mapping ownedTokens\n  * @param _owner the address to find owned tokenIds\n   */\n  function getTokensByOwner(address _owner) public view returns (uint256[]) {\n    return ownedTokens[_owner];\n  }\n}\n\n","abiDocs":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the token name","return":"string representing the token name","signature":"name()","signatureHash":"06fdde03"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to query the approval of"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the approved address for a token ID, or zero if no address set","return":"address currently approved for the given token ID","signature":"getApproved(uint256)","signatureHash":"081812fc"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address to be approved for the given token ID"},{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to be approved"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Approves another address to transfer the given token IDThe zero address indicates there is no approved address.There can only be one approved address per token at a given time.Can only be called by the token owner or an approved operator.","signature":"approve(address,uint256)","signatureHash":"095ea7b3"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the total amount of tokens stored by the contract","return":"uint256 representing the total amount of tokens","signature":"totalSupply()","signatureHash":"18160ddd"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"current owner of the token"},{"name":"_to","type":"address","description":"address to receive the ownership of the given token ID"},{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to be transferred"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Transfers the ownership of a given token ID to another addressUsage of this method is discouraged, use `safeTransferFrom` whenever possibleRequires the msg sender to be the owner, approved, or operator","signature":"transferFrom(address,address,uint256)","signatureHash":"23b872dd"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"address owning the tokens list to be accessed"},{"name":"_index","type":"uint256","description":"uint256 representing the index to be accessed of the requested tokens list"}],"name":"tokenOfOwnerByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the token ID at a given index of the tokens list of the requested owner","return":"uint256 token ID at the given index of the tokens list owned by the requested address","signature":"tokenOfOwnerByIndex(address,uint256)","signatureHash":"2f745c59"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"the address to find owned tokenIds"}],"name":"getTokensByOwner","payable":false,"stateMutability":"view","type":"function","notice":"retrieves array of owned tokensIds. Uses inhereted mapping ownedTokens","signature":"getTokensByOwner(address)","signatureHash":"40398d67"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"current owner of the token"},{"name":"_to","type":"address","description":"address to receive the ownership of the given token ID"},{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to be transferred"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator","signature":"safeTransferFrom(address,address,uint256)","signatureHash":"42842e0e"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to query the existence of"}],"name":"exists","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","details":"Returns whether the specified token exists","return":"whether the token exists","signature":"exists(uint256)","signatureHash":"4f558e79"},{"constant":true,"inputs":[{"name":"_index","type":"uint256","description":"uint256 representing the index to be accessed of the tokens list"}],"name":"tokenByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the token ID at a given index of all the tokens in this contractReverts if the index is greater or equal to the total number of tokens","return":"uint256 token ID at the given index of the tokens list","signature":"tokenByIndex(uint256)","signatureHash":"4f6ccce7"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to query the owner of"}],"name":"ownerOf","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the owner of the specified token ID","return":"owner address currently marked as the owner of the given token ID","signature":"ownerOf(uint256)","signatureHash":"6352211e"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"address to query the balance of"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the balance of the specified address","return":"uint256 representing the amount owned by the passed address","signature":"balanceOf(address)","signatureHash":"70a08231"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function","details":"Gets the token symbol","return":"string representing the token symbol","signature":"symbol()","signatureHash":"95d89b41"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"operator address to set the approval"},{"name":"_approved","type":"bool","description":"representing the status of the approval to be set"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Sets or unsets the approval of a given operatorAn operator is allowed to transfer all tokens of the sender on their behalf","signature":"setApprovalForAll(address,bool)","signatureHash":"a22cb465"},{"constant":false,"inputs":[{"name":"_uri","type":"string","description":"the string of the productId to purchase okenId <-> bookId relationship kept track in tokenURI"},{"name":"owner","type":"address","description":"the owner of the product - who to send the ETH to"}],"name":"buyPOP","outputs":[],"payable":true,"stateMutability":"payable","type":"function","notice":"Makes a purchase of a product, issuing a proof of purchase token","signature":"buyPOP(string,address)","signatureHash":"b6e10199"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"current owner of the token"},{"name":"_to","type":"address","description":"address to receive the ownership of the given token ID"},{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to be transferred"},{"name":"_data","type":"bytes","description":"bytes data to send along with a safe transfer check"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Safely transfers the ownership of a given token ID to another addressIf the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise, the transfer is reverted.Requires the msg sender to be the owner, approved, or operator","signature":"safeTransferFrom(address,address,uint256,bytes)","signatureHash":"b88d4fde"},{"constant":true,"inputs":[{"name":"_tokenId","type":"uint256","description":"uint256 ID of the token to query"}],"name":"tokenURI","payable":false,"stateMutability":"view","type":"function","details":"Returns an URI for a given token IDThrows if the token ID does not exist. May return an empty string.","signature":"tokenURI(uint256)","signatureHash":"c87b56dd"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"owner address which you want to query the approval of"},{"name":"_operator","type":"address","description":"operator address which you want to query the approval of"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function","details":"Tells whether an operator is approved by a given owner","return":"bool whether the given operator is approved by the given owner","signature":"isApprovedForAll(address,address)","signatureHash":"e985e9c5"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_coreAddress","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"tokenId","type":"uint256"},{"indexed":false,"name":"purchaser","type":"address"},{"indexed":false,"name":"productId","type":"string"},{"indexed":false,"name":"issuedTime","type":"uint256"}],"name":"POPIssued","type":"event","signature":"POPIssued(uint256,address,string,uint256)","signatureHash":"bda4dcb7"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event","signature":"Transfer(address,address,uint256)","signatureHash":"ddf252ad"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_approved","type":"address"},{"indexed":false,"name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event","signature":"Approval(address,address,uint256)","signatureHash":"8c5be1e5"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_operator","type":"address"},{"indexed":false,"name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event","signature":"ApprovalForAll(address,address,bool)","signatureHash":"17307eab"}]}
